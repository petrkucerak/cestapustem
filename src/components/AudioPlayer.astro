---
// Props passed to the player
const { audioSrc } = Astro.props;
---

<div class="flex items-center gap-4 p-4 rounded-md">
  <!-- Play/Pause Button -->
  <button id="playPauseButton" class="text-xl p-2 rounded transition">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-linecap="round"
      stroke-linejoin="round"
      width="24"
      height="24"
      stroke-width="2"
    >
      <path d="M7 4v16l13 -8z"></path>
    </svg>
  </button>

  <!-- Seek Bar -->
  <div
    class="relative flex-1 h-2 bg-gray-300 rounded cursor-pointer"
    id="seekBar"
  >
    <div
      class="absolute top-0 left-0 h-full bg-violet-dark rounded"
      id="seekBarProgress"
      style="width: 0%"
    >
    </div>
  </div>

  <!-- Time Display -->
  <span class="text-sm font-medium" id="timeDisplay">0:00 / 0:00</span>

  <!-- Hidden Audio Element -->
  <audio id="audioPlayer" src={audioSrc} preload="metadata"></audio>
</div>

<script>
   // @ts-nocheck
  const audioPlayer = document.getElementById("audioPlayer");
  const playPauseButton = document.getElementById("playPauseButton");
  const seekBar = document.getElementById("seekBar");
  const seekBarProgress = document.getElementById("seekBarProgress");
  const timeDisplay = document.getElementById("timeDisplay");

  // Format time as mm:ss
  function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  }

  // Update recording time on metadata load
  audioPlayer.addEventListener("loadedmetadata", () => {
    const duration = audioPlayer.duration || 0;
    timeDisplay.textContent = `0:00 / ${formatTime(duration)}`;
  });

  // Play/Pause functionality
  playPauseButton.addEventListener("click", () => {
    if (audioPlayer.paused) {
      audioPlayer.play();
      playPauseButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" width="24" height="24" stroke-width="2">
          <path d="M6 5m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v12a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z"></path>
          <path d="M14 5m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v12a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z"></path>
        </svg>`;
    } else {
      audioPlayer.pause();
      playPauseButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" width="24" height="24" stroke-width="2">
          <path d="M7 4v16l13 -8z"></path>
        </svg>`;
    }
  });

  // Update seek bar and time display during playback
  audioPlayer.addEventListener("timeupdate", () => {
    const currentTime = audioPlayer.currentTime;
    const duration = audioPlayer.duration || 0;
    const progress = (currentTime / duration) * 100;

    seekBarProgress.style.width = `${progress}%`;
    timeDisplay.textContent = `${formatTime(currentTime)} / ${formatTime(duration)}`;
  });

  // Seek functionality
  seekBar.addEventListener("click", (event) => {
    const rect = seekBar.getBoundingClientRect();
    const clickX = event.clientX - rect.left;
    const newTime = (clickX / seekBar.offsetWidth) * audioPlayer.duration;

    audioPlayer.currentTime = newTime;
  });
</script>
